// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Communication;
using Azure.Core;

namespace Azure.Communication.Chat
{
    internal partial class ChatParticipantInternal : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("communicationIdentifier");
            writer.WriteObjectValue(CommunicationIdentifier);
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ShareHistoryTime))
            {
                writer.WritePropertyName("shareHistoryTime");
                writer.WriteStringValue(ShareHistoryTime.Value, "O");
            }
            if (Optional.IsCollectionDefined(RoleIds))
            {
                writer.WritePropertyName("roleIds");
                writer.WriteStartArray();
                foreach (var item in RoleIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ChatParticipantInternal DeserializeChatParticipantInternal(JsonElement element)
        {
            CommunicationIdentifierModel communicationIdentifier = default;
            Optional<string> displayName = default;
            Optional<DateTimeOffset> shareHistoryTime = default;
            Optional<IList<string>> roleIds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("communicationIdentifier"))
                {
                    communicationIdentifier = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(property.Value);
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shareHistoryTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shareHistoryTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("roleIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    roleIds = array;
                    continue;
                }
            }
            return new ChatParticipantInternal(communicationIdentifier, displayName.Value, Optional.ToNullable(shareHistoryTime), Optional.ToList(roleIds));
        }
    }
}
